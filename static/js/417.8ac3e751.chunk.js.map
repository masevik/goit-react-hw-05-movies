{"version":3,"file":"static/js/417.8ac3e751.chunk.js","mappings":"mTAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,sGAGKF,EAAAA,EAAAA,IAAA,qCAAwCC,IAH7C,uBAEKE,EAFL,EAEHC,KAAQD,QAFL,kBAIEA,GAJF,kEAOA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,yFACkBN,EAAAA,EAAAA,IAAA,gBACZM,EADY,oBACEL,EADF,oBADlB,uBACGG,EADH,EACGA,KADH,kBAIEA,GAJF,kEAOA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BD,GAA/B,yFACkBN,EAAAA,EAAAA,IAAA,gBACZM,EADY,4BACUL,EADV,oBADlB,uBACGG,EADH,EACGA,KADH,kBAIEA,GAJF,kEAOA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAgCF,GAAhC,yFACkBN,EAAAA,EAAAA,IAAA,gBACZM,EADY,4BACUL,EADV,oBADlB,uBACGG,EADH,EACGA,KADH,kBAIEA,GAJF,kEAOA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,kFACCC,EAAS,CACbA,OAAQ,CACNC,QAASX,EACTY,SAAU,UAJT,SAOkBb,EAAAA,EAAAA,IAAA,6BAAgCU,GAASC,GAP3D,uBAOGP,EAPH,EAOGA,KAPH,kBAQEA,GARF,kE,yFCtBMU,EAAMC,EAAAA,GAAAA,IAAH,wEACZC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,G,4MChBSC,EAAiBR,EAAAA,GAAAA,GAAH,kEAKdS,EAAQT,EAAAA,GAAAA,IAAH,gEAKLU,EAAOV,EAAAA,GAAAA,GAAH,qE,SC4DjB,EA/Da,WACX,OAA4BW,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAaC,EAAAA,EAAAA,MAAbD,SAsBR,IApBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,mCAAG,WAAM5B,GAAN,+EACT6B,IAAP7B,EADgB,iEAMlBwB,GAAa,GANK,UAOGvB,EAAAA,EAAAA,IAAgBD,GAPnB,OAOZqB,EAPY,OAQlBC,EAAUD,EAAOS,MARC,mDAUlBC,EAAAA,EAAAA,KAVkB,yBAYlBP,GAAa,GAZK,6EAAH,sDAgBnBI,EAAcH,EACf,GAAE,CAACA,IAEW,OAAXJ,EAIJ,OACE,UAACb,EAAA,EAAD,CAAKwB,YAAY,OAAOC,aAAa,OAAOC,WAAW,OAAvD,UACGb,EAAOc,OAAS,GACf,wBACGd,EAAOe,KAAI,SAAAC,GACV,IAAQC,EAAsCD,EAAtCC,aAAcC,EAAwBF,EAAxBE,KAAMC,EAAkBH,EAAlBG,UAAWxC,EAAOqC,EAAPrC,GAEvC,OACE,UAACiB,EAAD,WACGqB,GACC,SAACpB,EAAD,CACEuB,IAAG,0CAAqCH,GACxCI,IAAG,UAAKH,MAGV,SAACrB,EAAD,CAAOuB,IAAKE,EAAaD,IAAI,iBAE/B,4BACE,SAACvB,EAAD,UAAOoB,KACP,uCAAeC,UAXExC,EAexB,MAGH,2CAGDuB,IAAa,SAACqB,EAAA,EAAD,MAGnB,C,qECpEYb,EAAe,kBAC1Bc,EAAAA,GAAAA,MAAY,yCAA0C,CACpDC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUvB,EACVwB,MAAO,SATiB,C","sources":["components/API.js","components/Box.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/ErrorMessage/errorMessage.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '3820fb012ec124360c2ca0b092d22f88';\n\nexport async function fetchTrendingMovies() {\n  const {\n    data: { results },\n  } = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return results;\n}\n\nexport async function fetchMovieById(id) {\n  const { data } = await axios.get(\n    `movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n}\n\nexport async function fetchActorsById(id) {\n  const { data } = await axios.get(\n    `movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n}\n\nexport async function fetchReviewsById(id) {\n  const { data } = await axios.get(\n    `movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n}\n\nexport async function fetchSearchMovie(query) {\n  const params = {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  };\n  const { data } = await axios.get(`search/movie?query=${query}`, params);\n  return data;\n}\n","import styled from 'styled-components';\nimport {\n  space,\n  layout,\n  typography,\n  color,\n  shadow,\n  border,\n  flexbox,\n} from 'styled-system';\n\nexport const Box = styled.div`\n  ${space}\n  ${layout}\n  ${typography}\n  ${color}\n  ${shadow}\n  ${border}\n  ${flexbox}\n`;\n","import styled from 'styled-components';\n\nexport const ActorsListItem = styled.li`\n  display: flex;\n  margin-bottom: 10px;\n`;\n\nexport const Image = styled.img`\n  width: 100px;\n  margin-right: 10px;\n`;\n\nexport const Name = styled.h3`\n  margin-top: 10px;\n  margin-bottom: 10px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchActorsById } from '../../components/API';\nimport { Box } from 'components/Box';\nimport { Loader } from '../../components/Loader';\nimport { errorMessage } from '../../components/ErrorMessage';\nimport placeholder from '../../images/coverPlaceholder.jpg';\nimport { ActorsListItem, Image, Name } from './Cast.styled';\n\nconst Cast = () => {\n  const [actors, setActors] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { moviesId } = useParams();\n\n  useEffect(() => {\n    const getActorsById = async id => {\n      if (id === undefined) {\n        return;\n      }\n\n      try {\n        setIsLoading(true);\n        const actors = await fetchActorsById(id);\n        setActors(actors.cast);\n      } catch {\n        errorMessage();\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getActorsById(moviesId);\n  }, [moviesId]);\n\n  if (actors === null) {\n    return;\n  }\n\n  return (\n    <Box paddingLeft=\"16px\" paddingRight=\"16px\" paddingTop=\"10px\">\n      {actors.length > 0 ? (\n        <ul>\n          {actors.map(actor => {\n            const { profile_path, name, character, id } = actor;\n\n            return (\n              <ActorsListItem key={id}>\n                {profile_path ? (\n                  <Image\n                    src={`https://image.tmdb.org/t/p/w200/${profile_path}`}\n                    alt={`${name}`}\n                  ></Image>\n                ) : (\n                  <Image src={placeholder} alt=\"placeholder\"></Image>\n                )}\n                <div>\n                  <Name>{name}</Name>\n                  <p>Character: {character}</p>\n                </div>\n              </ActorsListItem>\n            );\n          })}\n        </ul>\n      ) : (\n        'We don`t have information for this movie'\n      )}\n\n      {isLoading && <Loader />}\n    </Box>\n  );\n};\n\nexport default Cast;\n","import { toast } from 'react-toastify';\n\nexport const errorMessage = () =>\n  toast.error('Something went wrong. Please try again', {\n    position: 'top-right',\n    autoClose: 5000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n    theme: 'light',\n  });\n"],"names":["axios","API_KEY","fetchTrendingMovies","results","data","fetchMovieById","id","fetchActorsById","fetchReviewsById","fetchSearchMovie","query","params","api_key","language","Box","styled","space","layout","typography","color","shadow","border","flexbox","ActorsListItem","Image","Name","useState","actors","setActors","isLoading","setIsLoading","moviesId","useParams","useEffect","getActorsById","undefined","cast","errorMessage","paddingLeft","paddingRight","paddingTop","length","map","actor","profile_path","name","character","src","alt","placeholder","Loader","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","theme"],"sourceRoot":""}